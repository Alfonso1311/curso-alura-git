git init - inicializa un repositorio en Git
git status - muestra el estado de los archivos dentro del repositorio
git add . - agrega todos los archivos para commitear
git add nombreArchivo - agregar solo archivo especifico apra commitear
git commit -m "mensaje" - crear commit
git commit - cuando aceptemos cambios cuando se produce un conflicto y se actualiza la branch master

git config --global user.email "email@gmail.com" - configurar email de github
git config --global user.name "name" - configurar nombre de github
    *****tambien puede utilizar los siguientes comandos para autenticarse
git config --local user.name "Tu nombre aquí"
git config --local user.email "Tu@email.aqui”

git config --list - enumera la configuración que está siendo utilizada
    ***ingresar letra q - permite salir de la lista de configuraciones anterior
git config user.name - muestra el nombre de usuario con el que está logueado
git config user.email - muestra el email con el que está logueado

git log - muestra el historial de commits
git log --oneline - muestra el historial de commits con poca información
git log -p - muestra el historial de commits con bastante información
git log --graph - muestra de forma gráfica los commits con las lineas de branch

crear archivo llamado .gitignore - archivo que almacena lo que va a ignorar
nombreCarpeta/ - para ignorar una carpeta
nombreArchivo.extension - para ignorar un archivo

git init --bare - crear un repositorio puro (que contiene solo las modificaciones de los archivos) sólo controla para acceder como remoto
    C:/Users/alfon/Downloads/Certificados ONE - ALURA/EJERCICIOS ONE/Git y GitHub_Controle y comparta su código/servidor/
git remote - listar todos los servidores remotos que nuestro repositorio reconoce
git remote add nombreServidor direccionServidor - agregar un servidor remoto a nuestro servidor local
    git add servidorlocal "C:/Users/alfon/Downloads/Certificados ONE - ALURA/EJERCICIOS ONE/Git y GitHub_Controle y comparta su código/servidor/"
git remote -v - muestra la dirección de nuestros servidores
    (fetch) Indica el lugar desde donde vamos a obtener la información del servidor remoto
    (push) Indica el lugar a donde vamos a mandar la información

git clone direccionServidor nombreCarpetaCrearYGuardar - clonar repositorio
    git clone "/C/Users/alfon/Downloads/Certificados ONE - ALURA/EJERCICIOS ONE/Git y GitHub_Controle y comparta su código/servidor/" proyecto
git push nombreServidor rama - enviar la información al servidor
    git push servidorlocal master
git remote rename rama nuevoNombre - renombrar una rama
    git remote rename origin servidorlocal
git pull nombreServidor rama - obtener la información que está alojada en el servidor
    git pull servidorlocal master
git remote add rama url - agregar un repositorio de github para almacenar la información
    git remote add origin https://github.com/Alfonso1311/curso-alura-git.git
    git push origin master

git branch - muestra en que rama estamos trabajando
git branch nombreRama - crea una rama nueva
git checkout nombreRama - cambiar de rama para trabajar
git checkout -b nombreRama - crear una rama y trabajar en ella

git merge nombreRama - en la rama que estamos trabajando incorporar los cambios realizados de la rama que le estamos indicando en le comando
    ***ingresar mensaje para el commit o ingresar :x para salir y guardar
git rebase nombreRama - actualizar los commits de master con los de otra rama

git restore nombreArchivo - deshace los cambios que no han sido agregados para commitear 
git restore --staged - deshace los cambios que ya han sido agregados para commitear pero aún no se realiza el commit
git revert idCommit - deshace los cambios cuando el commit ya fue realizado

git stash nombreArchivo - guarda las modificaciones en un lugar temporal si todavía no esta listo para ser commiteado
git stash list - lista de todos los stach pendientes
git stash apply numeroStash - seguir trabajando en el stash deseado
git stash pop - agarrar la ultima modificación agregada al stash y eliminarla de la lista

    *** para navegar por los commits seguir los siguientes pasos:
        git checkout idCommit(7 digitos) - para posicionarnos en la linea del tiempo donde esta ese commit
        git checkout -b nombreRama - crear una nueva rama para poder regresar en cualquier momento y modificar ese commit
        git commit "mensaje" - commitear los cambios realizados
        git checkout nombreRama - volver a la rama principal donde ya estaran los cambios realizados del nuevo commit y los que teniamos

git diff commit1..commit2 - diferencia de códigos entre dos commits
git diff - muestra la diferencia de código entre la última modificación sin ser commiteado y el último commit

git tag -a numeroVersionTag -m "mensaje" - generar un tag o punto en nuestra aplicación
    git tag -a v0.1.0 -m "Lanzando la primera versión (BETA) de la aplicación de cursos"
git tag - lista de todas las tags o versiones

    *** para mandar a un servidor origin o servidorlocal una tag
        git push nombreServidor nombreRama
        git push nombreServidor numeroVersionTag



********************************************
* Estándar de versionamiento de software   *
* VERSIONES POR NÚMERO.                    *
********************************************

Algo común es realizar el manejo de versiones mediante 3 números: X.Y.Z y cada uno indica una cosa diferente:

    El primero (X) se le conoce como versión mayor y nos indica la versión principal del software. Ejemplo: 1.0.0, 3.0.0
    El segundo (Y) se le conoce como versión menor y nos indica nuevas funcionalidades. Ejemplo: 1.2.0, 3.3.0
    El tercero (Z) se le conoce como revisión y nos indica que se hizo una revisión del código por algun fallo. Ejemplo: 1.2.2, 3.3.4

Ahora que conocemos el significado de cada número, viene una pregunta importante: ¿cómo sabemos cuando cambiarlos y cuál cambiar?

    Versión mayor o X, cuando agreguemos nuevas funcionalidades importantes, puede ser como un nuevo modulo o característica clave para la funcionalidad.
    Versión menor o Y, cuando hacemos correcciones menores, cuando arreglamos un error y se agregan funcionalidades que no son cruciales para el proyecto.
    Revisión o Z, cada vez que entregamos el proyecto.